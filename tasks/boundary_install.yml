---
- name: installing boundary dependencies
  package:
    name:
      - unzip
      - curl
    state: present

- name: creating boundary group
  group:
    name: '{{ boundary_group }}'
    system: yes
  when: boundary_create_account

- name: creating boundary user
  user:
    name: '{{ boundary_user }}'
    home: '{{ boundary_home_directory }}'
    group: '{{ boundary_group }}'
    shell: /bin/false
    system: yes
  when: boundary_create_account

- name: creating boundary directories
  file:
    state: directory
    path: '{{ item }}'
    owner: '{{ boundary_user }}'
    group: '{{ boundary_group }}'
    mode: '0750'
  with_items:
    - '{{ boundary_home_directory }}'
    - '{{ boundary_data_directory }}'
    - '{{ boundary_install_directory }}'

- name: ensure remote boundary dir exists
  file:
    path: /tmp/boundary
    state: directory
    mode: 0755

- name: check boundary package checksum file
  stat:
    path: "/tmp/boundary/{{ boundary_shasums }}"
  register: boundary_checksum

- name: get boundary package checksum file
  get_url:
    url: "{{ boundary_checksum_file_url }}"
    dest: "/tmp/boundary/{{ boundary_shasums }}"
  tags: installation
  when: not boundary_checksum.stat.exists | bool

- name: get boundary package checksum
  shell: "grep {{ boundary_archive }} /tmp/boundary/{{ boundary_shasums }}"
  register: boundary_sha256
  tags:
    - installation
    - skip_ansible_lint

- name: check boundary package file
  stat:
    path: "/tmp/boundary/{{ boundary_archive }}"
  register: boundary_package
  tags: installation

- name: "download boundary - {{ boundary_zip_url }}"
  get_url:
    url: "{{ boundary_zip_url }}"
    dest: "/tmp/boundary/{{ boundary_archive }}"
    checksum: "sha256:{{ boundary_sha256.stdout.split(' ')|first }}"
    timeout: "300"
  tags: installation
  when: not boundary_package.stat.exists | bool

- name: unarchive boundary and install binary
  unarchive:
    remote_src: true
    src: '/tmp/boundary/{{ boundary_archive }}'
    dest: '{{ boundary_install_directory }}'
    owner: '{{ boundary_user }}'
    group: '{{ boundary_group }}'
    mode: '0770'

- name: check mlock capability
  become: true
  shell: "getcap {{ boundary_install_directory }}/boundary|grep cap_ipc_lock+ep"
  changed_when: false  # read-only task
  failed_when: false
  register: mlock_capability

- name: enable non root mlock capability
  become: true
  command: "setcap cap_ipc_lock=+ep {{ boundary_install_directory }}/boundary"
  when: mlock_capability.rc|int == 1

- name: templating out Boundary worker configuration
  block:
    - name: templating out boundary worker configuration file
      template:
        src: boundary-worker.hcl.j2
        dest: '{{ boundary_worker_file }}'
        owner: '{{ boundary_user }}'
        group: '{{ boundary_group }}'
        mode: '0640'
      notify:
        - restart boundary-worker daemon

    - name: templating out boundary worker systemd script
      template:
        src: boundary-worker.systemd.j2
        dest: /etc/systemd/system/boundary-worker.service
        owner: root
        group: root
        mode: '0640'
      notify:
        - reload boundary-worker daemon

    - name: starting and enabling boundary-worker
      systemd:
        name: boundary-worker
        enabled: yes
        state: started
  when: "'workers' in group_names"

- name: templating out Boundary controller configuration
  block:
    - name: templating out boundary controller configuration file
      template:
        src: boundary-controller.hcl.j2
        dest: '{{ boundary_controller_file }}'
        owner: '{{ boundary_user }}'
        group: '{{ boundary_group }}'
        mode: '0640'
      notify:
        - restart boundary-controller daemon

    - name: templating out boundary controller systemd script
      template:
        src: boundary-controller.systemd.j2
        dest: /etc/systemd/system/boundary-controller.service
        owner: root
        group: root
        mode: '0640'
      notify:
        - reload boundary-controller daemon

    - name: initializing database for boundary
      # yamllint disable-line rule:line-length
      shell: '{{ boundary_install_directory }}/boundary database init -config {{ boundary_controller_file }} > {{ boundary_data_directory }}/init.txt'
      run_once: yes

    - name: starting and enabling boundary-controller
      systemd:
        name: boundary-controller
        enabled: yes
        state: started
  when: "'controllers' in group_names"
